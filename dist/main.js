/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/door.js":
/*!*********************!*\
  !*** ./src/door.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Doors; });\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\")\n\nclass Doors {\n    constructor(options) {\n        this.doors = options.doors;\n        this.dt = options.dt;\n        this.TILESIZE = options.TILESIZE;\n        this.tcell = options.tcell;\n        this.pixelToTile = options.pixelToTile;\n        this.tileToPixel = options.tileToPixel;\n        this.COLOR = options.COLOR;\n        this.ctx = options.ctx\n    }\n\n    updateDoors(twin1, twin2, step) {\n        this.doors.forEach(door => {\n            let wasleft = door.dx < 0,\n                wasright = door.dx > 0,\n                falling = door.falling,\n                friction = door.friction * (falling ? 0.5 : 1),\n                accel = door.accel * (falling ? 0.5 : 1);\n            door.ddx = 0;\n            door.ddy = door.gravity;\n            if (door.left)\n                door.ddx = door.ddx - accel;     // door wants to go left\n            else if (wasleft)\n                door.ddx = door.ddx + friction;  // door was going left, but not any more\n\n            if (door.right) { // door wants to go right\n                door.ddx = door.ddx + accel;\n            }\n            else if (wasright)\n                door.ddx = door.ddx - friction;  // door was going right, but not any more\n\n            if (door.jump && !door.jumping && !falling) {\n                door.ddy = door.ddy - door.impulse;     // apply an instantaneous (large) vertical impulse\n                door.jumping = true;\n            }\n\n            door.y = door.y + (step * door.dy)\n            door.x = door.x + (step * door.dx)\n            door.dx = Util.bound(door.dx + (step * door.ddx), -door.maxdx, door.maxdx);\n            door.dy = Util.bound(door.dy + (step * door.ddy), -door.maxdy, door.maxdy);\n\n\n\n\n            let tx = this.pixelToTile(door.x),\n                ty = this.pixelToTile(door.y),\n                nx = door.x % this.TILESIZE,\n                ny = door.y % this.TILESIZE,\n                cell = this.tcell(tx, ty),\n                cellright = this.tcell(tx + 1, ty),\n                celldown = this.tcell(tx, ty + 1),\n                celldiag = this.tcell(tx + 1, ty + 1);\n\n            // door movement && edge detection.\n            if (door.left && (cell || !celldown)) {\n                door.left = false;\n                door.right = true;\n            } else if (door.right && (cellright || !celldiag)) {\n                door.right = false;\n                door.left = true;\n            }\n\n            // vertical collision\n            if (door.dy > 0) {\n                if ((celldown && !cell) ||\n                    (celldiag && !cellright && nx)) {\n                    door.y = this.tileToPixel(ty);       // clamp the y position to avoid falling into platform below\n                    door.dy = 0;            // stop downward velocity\n                    door.falling = false;   // no longer falling\n                    door.jumping = false;   // (or jumping)\n                    ny = 0;                   // - no longer overlaps the cells below\n                }\n            }\n            else if (door.dy < 0) {\n                if ((cell && !celldown) ||\n                    (cellright && !celldiag && nx)) {\n                    door.y = this.tileToPixel(ty + 1);   // clamp the y position to avoid jumping into platform above\n                    door.dy = 0;            // stop upward velocity\n                    cell = celldown;     // player is no longer really in that cell, we clamped them to the cell below\n                    cellright = celldiag;     // (ditto)\n                    ny = 0;            // player no longer overlaps the cells below\n                }\n            }\n\n\n            // horizontal collision\n            if (door.dx > 0) {\n                if ((cellright && !cell) ||\n                    (celldiag && !celldown && ny)) {\n                    door.x = this.tileToPixel(tx);       // clamp the x position to avoid moving into the platform we just hit\n                    door.dx = 0;            // stop horizontal velocity\n                }\n            }\n            else if (door.dx < 0) {\n                if ((cell && !cellright) ||\n                    (celldown && !celldiag && ny)) {\n                    door.x = this.tileToPixel(tx + 1);  // clamp the x position to avoid moving into the platform we just hit\n                    door.dx = 0;           // stop horizontal velocity\n                }\n            }\n\n\n\n            // monster and player overlap\n            if (!door.dead) { // only do this if the monster is dead\n                if (Util.overlap(twin1.x, twin1.y, this.TILESIZE, this.TILESIZE, door.x, door.y, this.TILESIZE, this.TILESIZE)) {\n                    if ((twin1.dy > 0) && (door.y - twin1.y > this.TILESIZE / 2)) {\n                        door.dead = true // kill door if stepped on\n                    } else {\n                        this.killTwin(twin1)\n                    }\n                }\n\n                if (Util.overlap(twin2.x, twin2.y, this.TILESIZE, this.TILESIZE, door.x, door.y, this.TILESIZE, this.TILESIZE)) {\n                    if ((twin2.dy > 0) && (door.y - twin2.y > this.TILESIZE / 2)) {\n                        door.dead = true // kill door if stepped on\n                    } else {\n                        this.killTwin(twin2)\n                    }\n                }\n\n            }\n            door.falling = !(celldown || (nx && celldiag));\n\n        })\n\n    }\n\n    killTwin(twin) {\n        // debugger\n        twin.x = twin.start.x\n        twin.y = twin.start.y\n        twin.dx = twin.dy = 0;\n    }\n\n    renderDoors(dt) {\n        this.ctx.fillstyle = this.COLOR.SLATE;\n        this.doors.forEach(door => {\n            if (!door.dead) {\n                this.ctx.fillRect(door.x + (door.dx * dt), door.y + (door.dy * dt), this.TILESIZE, this.TILESIZE)\n            }\n        })\n    }\n\n}\n\n\n//# sourceURL=webpack:///./src/door.js?");

/***/ }),

/***/ "./src/enemies.js":
/*!************************!*\
  !*** ./src/enemies.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Enemies; });\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\")\n\nclass Enemies { \n    constructor(options){\n        this.enemies = options.enemies;\n        this.dt = options.dt;\n        this.TILESIZE = options.TILESIZE;\n        this.tcell = options.tcell;\n        this.pixelToTile = options.pixelToTile;\n        this.tileToPixel = options.tileToPixel;\n        this.COLOR = options.COLOR;\n        this.ctx = options.ctx\n    }\n\n    updateEnemies(twin1, twin2, step){\n        this.enemies.forEach( enemy => {\n            let wasleft = enemy.dx < 0,\n                wasright = enemy.dx > 0,\n                falling = enemy.falling,\n                friction = enemy.friction * (falling ? 0.5 : 1),\n                accel = enemy.accel * (falling ? 0.5 : 1);\n            enemy.ddx = 0;\n            enemy.ddy = enemy.gravity;\n            if (enemy.left)\n                enemy.ddx = enemy.ddx - accel;     // enemy wants to go left\n            else if (wasleft)\n                enemy.ddx = enemy.ddx + friction;  // enemy was going left, but not any more\n\n            if (enemy.right) { // enemy wants to go right\n                enemy.ddx = enemy.ddx + accel;\n            }\n            else if (wasright)\n                enemy.ddx = enemy.ddx - friction;  // enemy was going right, but not any more\n\n            if (enemy.jump && !enemy.jumping && !falling) {\n                enemy.ddy = enemy.ddy - enemy.impulse;     // apply an instantaneous (large) vertical impulse\n                enemy.jumping = true;\n            }\n\n            enemy.y = enemy.y + (step * enemy.dy)\n            enemy.x = enemy.x + (step * enemy.dx)\n            enemy.dx = Util.bound(enemy.dx + (step * enemy.ddx), -enemy.maxdx, enemy.maxdx);\n            enemy.dy = Util.bound(enemy.dy + (step * enemy.ddy), -enemy.maxdy, enemy.maxdy);\n\n\n\n\n            let tx = this.pixelToTile(enemy.x),\n                ty = this.pixelToTile(enemy.y),\n                nx = enemy.x % this.TILESIZE,\n                ny = enemy.y % this.TILESIZE,\n                cell = this.tcell(tx, ty),\n                cellright = this.tcell(tx + 1, ty),\n                celldown = this.tcell(tx, ty + 1),\n                celldiag = this.tcell(tx + 1, ty + 1);\n\n            // enemy movement && edge detection.\n            if ( enemy.left && (cell || !celldown)) {\n                enemy.left = false;\n                enemy.right = true;\n            } else if ( enemy.right && ( cellright || !celldiag ) ){\n                enemy.right = false;\n                enemy.left = true;\n            }\n\n            // vertical collision\n            if (enemy.dy > 0) {\n                if ((celldown && !cell) ||\n                    (celldiag && !cellright && nx)) {\n                    enemy.y = this.tileToPixel(ty);       // clamp the y position to avoid falling into platform below\n                    enemy.dy = 0;            // stop downward velocity\n                    enemy.falling = false;   // no longer falling\n                    enemy.jumping = false;   // (or jumping)\n                    ny = 0;                   // - no longer overlaps the cells below\n                }\n            }\n            else if (enemy.dy < 0) {\n                if ((cell && !celldown) ||\n                    (cellright && !celldiag && nx)) {\n                    enemy.y = this.tileToPixel(ty + 1);   // clamp the y position to avoid jumping into platform above\n                    enemy.dy = 0;            // stop upward velocity\n                    cell = celldown;     // player is no longer really in that cell, we clamped them to the cell below\n                    cellright = celldiag;     // (ditto)\n                    ny = 0;            // player no longer overlaps the cells below\n                }\n            }\n\n\n            // horizontal collision\n            if (enemy.dx > 0) {\n                if ((cellright && !cell) ||\n                    (celldiag && !celldown && ny)) {\n                    enemy.x = this.tileToPixel(tx);       // clamp the x position to avoid moving into the platform we just hit\n                    enemy.dx = 0;            // stop horizontal velocity\n                }\n            }\n            else if (enemy.dx < 0) {\n                if ((cell && !cellright) ||\n                    (celldown && !celldiag && ny)) {\n                    enemy.x = this.tileToPixel(tx + 1);  // clamp the x position to avoid moving into the platform we just hit\n                    enemy.dx = 0;           // stop horizontal velocity\n                }\n            }\n\n\n            \n            // monster and player overlap\n            if (!enemy.dead){ // only do this if the monster is dead\n                if (Util.overlap(twin1.x, twin1.y, this.TILESIZE, this.TILESIZE, enemy.x, enemy.y, this.TILESIZE, this.TILESIZE)) {\n                    if ((twin1.dy > 0) && (enemy.y - twin1.y > this.TILESIZE / 2)){\n                        enemy.dead = true // kill enemy if stepped on\n                    } else {\n                        this.killTwin(twin1) \n                    }\n                }\n\n                if (Util.overlap(twin2.x, twin2.y, this.TILESIZE, this.TILESIZE, enemy.x, enemy.y, this.TILESIZE, this.TILESIZE)) {\n                    if ((twin2.dy > 0) && (enemy.y - twin2.y > this.TILESIZE / 2)) {\n                        enemy.dead = true // kill enemy if stepped on\n                    } else {\n                        this.killTwin(twin2)\n                    }\n                }\n\n            }\n            enemy.falling = !(celldown || (nx && celldiag));\n\n        })\n\n    }\n    \n    killTwin(twin){\n        // debugger\n        twin.x = twin.start.x\n        twin.y = twin.start.y\n        twin.dx = twin.dy = 0;\n    }\n\n    renderEnemies(dt){\n        this.ctx.fillstyle = this.COLOR.SLATE;\n        this.enemies.forEach(enemy => {\n            if ( !enemy.dead ){\n                this.ctx.fillRect(enemy.x + (enemy.dx * dt), enemy.y + (enemy.dy * dt), this.TILESIZE, this.TILESIZE)\n            }\n        })\n    }\n\n}\n\n\n//# sourceURL=webpack:///./src/enemies.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _twin1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./twin1.js */ \"./src/twin1.js\");\n/* harmony import */ var _twin2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./twin2.js */ \"./src/twin2.js\");\n/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player.js */ \"./src/player.js\");\n/* harmony import */ var _enemies_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enemies.js */ \"./src/enemies.js\");\n/* harmony import */ var _door_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./door.js */ \"./src/door.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass Game {\r\n    constructor(options) {\r\n        this.ctx = options.ctx;\r\n        this.MAPSIZE = options.MAPSIZE;\r\n        this.COLORS = options.COLORS;\r\n        this.tcell = options.tcell;\r\n        this.TILESIZE = options.TILESIZE;\r\n        this.COLOR = options.COLOR;\r\n        this.spritesheet = options.spritesheet;\r\n        this.spriteCoordinates = options.spriteCoordinates\r\n        this.twin1 = new _player_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](options)\r\n        this.twin2 = new _twin2_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](options)\r\n        this.enemies = new _enemies_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](options)\r\n        this.doors = new _door_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](options)\r\n        this.currentLevel = 1\r\n    }\r\n\r\n    update(twin1, twin2, step){\r\n        this.twin1.update(twin1, step)\r\n        this.twin2.update(twin2, step)\r\n        this.enemies.updateEnemies(twin1, twin2, step)\r\n        this.doors.updateDoors(twin1, twin2, step)\r\n    }\r\n\r\n\r\n    render(ctx, twin1, twin2, width, height, dt){\r\n        ctx.clearRect(0, 0, width, height);\r\n        // Now draw!\r\n        this.renderMap(ctx);\r\n        this.twin1.renderTwin(ctx, twin1, dt);\r\n        this.twin2.renderTwin(ctx, twin2, dt)\r\n        this.enemies.renderEnemies(dt)\r\n        this.doors.renderDoors(dt)\r\n        ctx.fillStyle = \"gray\";\r\n        ctx.globalCompositeOperation = 'destination-over'\r\n        ctx.fillRect(0, 0, width, height);\r\n    }\r\n\r\n\r\n    renderMap(ctx) {\r\n        let x, y, cell;\r\n        for (y = 0; y < this.MAPSIZE.th; y++) {\r\n            for (x = 0; x < this.MAPSIZE.tw; x++) {\r\n                cell = this.tcell(x, y);\r\n                if (cell) {\r\n                    let sprite = this.spriteCoordinates[(cell-1).toString()]\r\n                    ctx.drawImage(\r\n                        this.spritesheet,\r\n                        sprite.x,\r\n                        sprite.y,\r\n                        this.TILESIZE / 3,\r\n                        this.TILESIZE / 3,\r\n                        x * this.TILESIZE,\r\n                        y * this.TILESIZE,\r\n                        this.TILESIZE * 1.03,\r\n                        this.TILESIZE\r\n                    )\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Game);\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game.js */ \"./src/game.js\");\n\r\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\r\nconst spritesheet = new Image();\r\nspritesheet.src = \"../images/spritesheet.png\";\r\n\r\n// Constants and functions\r\n\r\n\r\n\r\n\r\n\r\nconst MAPSIZE = { tw: 21, th: 12 },\r\n    TILESIZE = 63,\r\n    UNIT = TILESIZE,\r\n    GRAVITY = 9.8 * 8, \r\n    MAXDX = 6,      \r\n    MAXDY = 20,      \r\n    ACCELERATION = 1 / 2,    \r\n    FRICTION = 1 / 6,   \r\n    IMPULSE = 1500,   \r\n    COLOR = { BLACK: '#000000', YELLOW: '#ECD078', BRICK: '#D95B43', PINK: '#C02942', PURPLE: '#542437', GREY: '#333', SLATE: '#53777A', GOLD: 'gold' },\r\n    COLORS = [COLOR.YELLOW, COLOR.BRICK, COLOR.PINK, COLOR.PURPLE, COLOR.GREY],\r\n    KEY = { SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, W: 87, A: 65, S: 83, D: 68, ENTER: 13};\r\n\r\n    \r\n\r\nlet now, last = Util.timestamp(),\r\n    dt = 0,\r\n    TWIN1ANIMATIONS = {\r\n    IDLE: { x: 0, y: 0, w: 54, h: 54, frames: 4, fps: 5 },\r\n    LEFT: { x: 0, y: 54, w: 54, h: 54, frames: 8, fps: 10 },\r\n    RIGHT: { x: 0, y: 108, w: 54, h: 54, frames: 8, fps: 10 },\r\n    JUMPINGL: { x: 0, y: 162, w: 54, h: 54, frames: 4, fps: 10 },\r\n    JUMPINGR: { x: 0, y: 216, w: 54, h: 54, frames: 4, fps: 10 },\r\n    FALLINGL: { x: 0, y: 270, w: 54, h: 54, frames: 4, fps: 10 },\r\n    FALLINGR: { x: 0, y: 324, w: 54, h: 54, frames: 4, fps: 10 },\r\n    }\r\n\r\n///\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", e => {\r\n    const onKey = (ev, key, down) => {\r\n        switch (key) {\r\n            case KEY.A: \r\n                twin1.left = down; \r\n                twin2.left = down; \r\n                return false;\r\n            case KEY.D: \r\n                twin1.right = down;\r\n                twin2.right = down; \r\n                return false;\r\n            case KEY.SPACE: \r\n                twin1.jump = down; \r\n                twin2.jump = down;\r\n                return false;\r\n            case KEY.ENTER:\r\n                debugger\r\n                handleEnter()\r\n                return false;\r\n        }\r\n    }\r\n\r\n    const handleEnter = () =>{\r\n        if (!paused){\r\n            // debugger\r\n            paused = true\r\n        } else {\r\n            // debugger\r\n            paused = false\r\n        }\r\n    }\r\n  \r\n    document.addEventListener('keydown', function (ev) { return onKey(ev, ev.keyCode, true); }, false);\r\n    document.addEventListener('keyup', function (ev) { return onKey(ev, ev.keyCode, false); }, false);\r\n    \r\n    const canvas = document.getElementById('canvas'),\r\n        ctx = canvas.getContext(\"2d\"),\r\n        width = canvas.width = MAPSIZE.tw * TILESIZE,\r\n        height = canvas.height = MAPSIZE.th * TILESIZE,\r\n        fps = 60,\r\n        step = 1 / fps\r\n\r\n    const spriteCoordinates = {\r\n        \"154\": {x: 48, y: 117},\r\n        \"121\": {x: 25, y: 94},\r\n        \"129\": {x: 210, y: 94},\r\n        \"122\": {x: 48, y: 94},\r\n        \"123\": {x: 71, y: 94},\r\n        \"124\": {x: 94, y: 94}\r\n    } \r\n\r\n\r\n    let twin1 = {},\r\n        twin2 = {},\r\n        cells = [],\r\n        enemies = [],\r\n        paused = false,\r\n        doors = []\r\n\r\n    const tileToPixel = t => (t * TILESIZE),\r\n        pixelToTile = p => (Math.floor(p / TILESIZE)),\r\n        cell = (x, y) => (tcell(pixeltoTile(x), pixelToTile(y))),\r\n        tcell = (tx, ty) => (cells[tx + (ty * MAPSIZE.tw)]);\r\n\r\n    const options = {\r\n        ctx,\r\n        MAPSIZE,\r\n        COLORS,\r\n        tcell,\r\n        TILESIZE,\r\n        COLOR,\r\n        spritesheet,\r\n        spriteCoordinates,\r\n        UNIT,\r\n        ACCELERATION,\r\n        FRICTION,\r\n        IMPULSE,\r\n        MAXDX,\r\n        MAXDY,\r\n        tileToPixel,\r\n        pixelToTile,\r\n        GRAVITY,\r\n        TWIN1ANIMATIONS,\r\n        enemies,\r\n        doors\r\n    }\r\n\r\n    const GameInstance = new _game_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\r\n            options\r\n        )\r\n\r\n    // parses json to be useable by the app. Build objects from it that can be manipulated.\r\n\r\n    const setup = map => {\r\n        let data = map.layers[0].data,\r\n            objects = map.layers[1].objects\r\n\r\n        objects.forEach(object => {\r\n            let entity = setupEntity(object);\r\n            switch (object.type){\r\n                case \"twin1\": \r\n                    twin1 = entity; \r\n                    break;\r\n                case \"twin2\" : \r\n                    twin2 = entity; \r\n                    break;\r\n                case \"enemy\" :\r\n                    enemies.push(entity);\r\n                    break;\r\n                case \"door\" :\r\n                    doors.push(entity);\r\n                    break;\r\n            }\r\n        })\r\n\r\n        cells = data\r\n    }\r\n\r\n\r\n    const setupEntity = obj => {\r\n        let entity = {};\r\n        entity.x = obj.x * 3; // multiplied by 3 because of resize\r\n        entity.y = obj.y * 3; // multiplied by 3 because of resize\r\n        entity.dx = 0;\r\n        entity.dy = 0;\r\n        entity.left = \"\"\r\n        entity.right = \"\"\r\n        entity.maxdx = UNIT * MAXDX;\r\n        entity.gravity = UNIT * GRAVITY;\r\n        entity.maxdy = UNIT * MAXDY;\r\n        entity.impulse = UNIT * IMPULSE;\r\n        entity.accel = entity.maxdx /  ACCELERATION;\r\n        entity.friction = entity.maxdx / FRICTION;\r\n        // entity.jump = true\r\n\r\n        obj.properties.forEach(property => {\r\n            if (property.name === \"left\") entity.left = property.value\r\n            if (property.name === \"right\") entity.left = property.value\r\n            if (property.name === \"maxdx\") {\r\n                entity.maxdx = UNIT * property.value\r\n            }\r\n            if (property.name === \"maxdy\") {\r\n                entity.maxdy = UNIT * property.value\r\n            }\r\n            if (property.name === \"jump\"){\r\n                entity.jump = property.value\r\n            }\r\n            \r\n        })\r\n\r\n        // entity.enemy = obj.type == \"enemy\";\r\n        // entity.twin1 = obj.type == \"twin1\";\r\n        // entity.treasure = obj.type == \"treasure\";\r\n        // entity.twin2 = obj.type == \"twin2\";\r\n        // entity.left = obj.properties.find(property => property.name = \"left\").value\r\n        // entity.right = obj.properties.right;\r\n        entity.start = { x: obj.x * 3, y: obj.y * 3 }\r\n        entity.killed = entity.collected = 0;\r\n        entity.animation = {}\r\n        return entity;\r\n    }\r\n\r\n\r\n    const frame = () => {\r\n        now = Util.timestamp();\r\n        dt = dt + Math.min(1, (now - last) / 1000);\r\n        while (dt > step && !paused) {\r\n            dt = dt - step;\r\n            GameInstance.update(twin1, twin2, step);\r\n        }\r\n        GameInstance.render(ctx, twin1, twin2, width, height, dt);\r\n        last = now;\r\n        requestAnimationFrame(frame, canvas);\r\n    }\r\n\r\n\r\n    // Grab level data from json.\r\n    let level\r\n    switch (GameInstance.currentLevel) {\r\n        case 0:\r\n\r\n        case 1:\r\n            level = \"test-smoller.json\"\r\n    }\r\n\r\n    Util.get(level, function (req) {\r\n        setup(JSON.parse(req.responseText));\r\n        frame();\r\n    });   \r\n\r\n\r\n})\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Player; });\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\nconst twinSheet = new Image()\ntwinSheet.src = \"../images/twinspritesheet.png\"\n\n\n\n\nclass Player{\n    constructor(options){\n        this.ctx = options.ctx;\n        this.UNIT = options.UNIT;\n        this.ACCELERATION = options.ACCELERATION;\n        this.FRICTION = options.FRICTION;\n        this.IMPULSE = options.IMPULSE;\n        this.MAXDX = options.MAXDX;\n        this.MAXDY = options.MAXDY;\n        this.tileToPixel = options.tileToPixel;\n        this.pixelToTile = options.pixelToTile;\n        this.tcell = options.tcell;\n        this.GRAVITY = options.GRAVITY;\n        this.TILESIZE = options.TILESIZE;\n        this.COLOR = options.COLOR;\n        this.TWIN1ANIMATIONS = options.TWIN1ANIMATIONS\n    }\n\n\n    renderTwin(ctx, twin, dt) {\n        // ctx.fillStyle = this.COLOR.YELLOW;\n        // ctx.fillRect(twin.x + (twin.dx * dt), twin.y + (twin.dy * dt), this.TILESIZE, this.TILESIZE);\n        ctx.drawImage(\n            twinSheet, // Source image object\n            twin.animation.x + (twin.animationFrame * twin.animation.w), //\tSource x\n            twin.animation.y, // \tSource y\n            54, // Source width\n            54, // Source height\n            twin.x + (twin.dx * dt), // Destination x\n            twin.y + (twin.dy * dt), // Destination y\n            this.TILESIZE, // Destination width\n            this.TILESIZE // Destination height\n        )\n\n        // this.idle(ctx, twin, dt)\n\n        let n, max;\n\n        ctx.fillStyle = this.COLOR.GOLD;\n        for (n = 0, max = twin.collected; n < max; n++)\n            ctx.fillRect(this.tileToPixel(2 + n), this.tileToPixel(2), this.TILESIZE / 2, this.TILESIZE / 2);\n\n        ctx.fillStyle = this.COLOR.SLATE;\n        for (n = 0, max = twin.killed; n < max; n++)\n            ctx.fillRect(this.tileToPixel(2 + n), this.tileToPixel(3), this.TILESIZE / 2, this.TILESIZE / 2);\n\n    }\n\n    update( player, dt){\n        let wasleft = player.dx < 0,\n            wasright = player.dx > 0,\n            falling = player.falling,\n            friction = player.friction * (falling ? 0.5 : 1),\n            accel = player.accel * (falling ? 0.5 : 1);\n\n        this.animate(player)\n        player.ddx = 0;\n        player.ddy = player.gravity;\n        if (player.left)\n            player.ddx = player.ddx - accel;     // player wants to go left\n        else if (wasleft)\n            player.ddx = player.ddx + friction;  // player was going left, but not any more\n\n        if (player.right) { // player wants to go right\n            player.ddx = player.ddx + accel;    \n        }\n        else if (wasright)\n            player.ddx = player.ddx - friction;  // player was going right, but not any more\n\n        if (player.jump && !player.jumping && !falling) {\n            player.ddy = player.ddy - player.impulse;     // apply an instantaneous (large) vertical impulse\n            player.jumping = true;\n        }\n\n        player.y = player.y + (dt * player.dy)\n        player.x = player.x + (dt * player.dx)\n        player.dx = Util.bound(player.dx + (dt * player.ddx), -player.maxdx, player.maxdx);\n        player.dy = Util.bound(player.dy + (dt * player.ddy), -player.maxdy, player.maxdy);\n\n        if ((wasleft && (player.dx > 0)) ||\n            (wasright && (player.dx < 0))) {\n            player.dx = 0; // clamp at zero to prevent friction from making us jiggle side to side\n        }\n\n        //collision settings\n\n        let tx = this.pixelToTile(player.x),\n            ty = this.pixelToTile(player.y),\n            nx = player.x % this.TILESIZE,\n            ny = player.y % this.TILESIZE,\n            cell = this.tcell(tx, ty),\n            cellright = this.tcell(tx + 1, ty),\n            celldown = this.tcell(tx, ty + 1),\n            celldiag = this.tcell(tx + 1, ty + 1);\n\n        // vertical velocity collision\n        if (player.dy > 0) {\n            if ((celldown && !cell) ||\n                (celldiag && !cellright && nx)) {\n                player.y = this.tileToPixel(ty);       // clamp the y position to avoid falling into platform below\n                player.dy = 0;            // stop downward velocity\n                player.falling = false;   // no longer falling\n                player.jumping = false;   // (or jumping)\n                ny = 0;                   // - no longer overlaps the cells below\n            }\n        }\n        else if (player.dy < 0) {\n            if ((cell && !celldown) ||\n                (cellright && !celldiag && nx)) {\n                player.y = this.tileToPixel(ty + 1);   // clamp the y position to avoid jumping into platform above\n                player.dy = 0;            // stop upward velocity\n                cell = celldown;     // player is no longer really in that cell, we clamped them to the cell below\n                cellright = celldiag;     // (ditto)\n                ny = 0;            // player no longer overlaps the cells below\n            }\n        }\n\n        //horizontal velocity collision\n\n        if (player.dx > 0) {\n            if ((cellright && !cell) ||\n                (celldiag && !celldown && ny)) {\n                player.x = this.tileToPixel(tx);       // clamp the x position to avoid moving into the platform we just hit\n                player.dx = 0;            // stop horizontal velocity\n            }\n        }\n        else if (player.dx < 0) {\n            if ((cell && !cellright) ||\n                (celldown && !celldiag && ny)) {\n                player.x = this.tileToPixel(tx + 1);  // clamp the x position to avoid moving into the platform we just hit\n                player.dx = 0;           // stop horizontal velocity\n            }\n        }\n\n        player.falling = !(celldown || (nx && celldiag));\n\n    }\n\n\n    animate(player){\n        if (player.left && !player.jumping && !player.falling) {\n            Util.animate(player, this.TWIN1ANIMATIONS.LEFT)\n        } else if (player.right && !player.jumping && !player.falling) {\n            Util.animate(player, this.TWIN1ANIMATIONS.RIGHT)\n        } else if (player.jump && !player.falling ) {\n            Util.animate(player, this.TWIN1ANIMATIONS.JUMPINGL)\n        // } else if ((player.jump && !player.left && !player.falling) || (player.jump && player.right && !player.falling)) {\n        //     debugger\n        //     Util.animate(player, this.TWIN1ANIMATIONS.JUMPINGR)\n        // } else if ( player.jump && !player.falling ) {\n        //     debugger\n        //     Util.animate(player, this.TWIN1ANIMATIONS.JUMPINGL)\n        } else if (player.falling && player.left) {\n            Util.animate(player, this.TWIN1ANIMATIONS.FALLINGL)\n        } else if (player.falling && player.right) {\n            Util.animate(player, this.TWIN1ANIMATIONS.FALLINGR)}\n        else if (player.falling && !player.jump) {\n            Util.animate(player, this.TWIN1ANIMATIONS.FALLINGL)\n        } else if (player.jump) {\n            Util.animate(player, this.TWIN1ANIMATIONS.JUMPINGL)\n        }\n        else {\n            Util.animate(player, this.TWIN1ANIMATIONS.IDLE)\n        }\n\n\n    }\n\n\n}\n\n\n//# sourceURL=webpack:///./src/player.js?");

/***/ }),

/***/ "./src/twin1.js":
/*!**********************!*\
  !*** ./src/twin1.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n\nconst loliSheet = new Image()\nloliSheet.src = \"../images/loli.png\"\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass Twin1 extends _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(ctx, UNIT, ACCELERATION, FRICTION, IMPULSE, MAXDX, MAXDY, tileToPixel, pixelToTile, tcell, GRAVITY, TILESIZE, COLOR, TWIN1ANIMATIONS) {\n        super(ctx, UNIT, ACCELERATION, FRICTION, IMPULSE, MAXDX, MAXDY, tileToPixel, pixelToTile, tcell, GRAVITY, TILESIZE, COLOR, TWIN1ANIMATIONS)\n    }\n\n\n\n    // update(player, dt) {\n    //     let wasleft = player.dx < 0,\n    //         wasright = player.dx > 0,\n    //         falling = player.falling,\n    //         friction = player.friction * (falling ? 0.5 : 1),\n    //         accel = player.accel * (falling ? 0.5 : 1);\n\n    //     this.animate(player)\n\n    //     player.ddx = 0;\n    //     player.ddy = player.gravity;\n    //     if (player.left)\n    //         player.ddx = player.ddx - accel;     // player wants to go left\n    //     else if (wasleft)\n    //         player.ddx = player.ddx + friction;  // player was going left, but not any more\n\n    //     if (player.right) { // player wants to go right\n    //         player.ddx = player.ddx + accel;\n    //     }\n    //     else if (wasright)\n    //         player.ddx = player.ddx - friction;  // player was going right, but not any more\n\n    //     if (player.jump && !player.jumping && !falling) {\n    //         player.ddy = player.ddy - player.impulse;     // apply an instantaneous (large) vertical impulse\n    //         player.jumping = true;\n    //     }\n\n    //     player.y = player.y + (dt * player.dy)\n    //     player.x = player.x + (dt * player.dx)\n    //     player.dx = Util.bound(player.dx + (dt * player.ddx), -player.maxdx, player.maxdx);\n    //     player.dy = Util.bound(player.dy + (dt * player.ddy), -player.maxdy, player.maxdy);\n\n    //     if ((wasleft && (player.dx > 0)) ||\n    //         (wasright && (player.dx < 0))) {\n    //         player.dx = 0; // clamp at zero to prevent friction from making us jiggle side to side\n    //     }\n\n    //     //collision settings\n\n    //     let tx = this.pixelToTile(player.x),\n    //         ty = this.pixelToTile(player.y),\n    //         nx = player.x % this.TILESIZE,\n    //         ny = player.y % this.TILESIZE,\n    //         cell = this.tcell(tx, ty),\n    //         cellright = this.tcell(tx + 1, ty),\n    //         celldown = this.tcell(tx, ty + 1),\n    //         celldiag = this.tcell(tx + 1, ty + 1);\n\n    //     // vertical velocity collision\n    //     if (player.dy > 0) {\n    //         if ((celldown && !cell) ||\n    //             (celldiag && !cellright && nx)) {\n    //             player.y = this.tileToPixel(ty);       // clamp the y position to avoid falling into platform below\n    //             player.dy = 0;            // stop downward velocity\n    //             player.falling = false;   // no longer falling\n    //             player.jumping = false;   // (or jumping)\n    //             ny = 0;                   // - no longer overlaps the cells below\n    //         }\n    //     }\n    //     else if (player.dy < 0) {\n    //         if ((cell && !celldown) ||\n    //             (cellright && !celldiag && nx)) {\n    //             player.y = this.tileToPixel(ty + 1);   // clamp the y position to avoid jumping into platform above\n    //             player.dy = 0;            // stop upward velocity\n    //             cell = celldown;     // player is no longer really in that cell, we clamped them to the cell below\n    //             cellright = celldiag;     // (ditto)\n    //             ny = 0;            // player no longer overlaps the cells below\n    //         }\n    //     }\n\n    //     //horizontal velocity collision\n\n    //     if (player.dx > 0) {\n    //         if ((cellright && !cell) ||\n    //             (celldiag && !celldown && ny)) {\n    //             player.x = this.tileToPixel(tx);       // clamp the x position to avoid moving into the platform we just hit\n    //             player.dx = 0;            // stop horizontal velocity\n    //         }\n    //     }\n    //     else if (player.dx < 0) {\n    //         if ((cell && !cellright) ||\n    //             (celldown && !celldiag && ny)) {\n    //             player.x = this.tileToPixel(tx + 1);  // clamp the x position to avoid moving into the platform we just hit\n    //             player.dx = 0;           // stop horizontal velocity\n    //         }\n    //     }\n\n    //     player.falling = !(celldown || (nx && celldiag));\n\n    // }\n\n\n    // animate(player) {\n    //     debugger\n    //     Util.animate(player, this.TWIN1ANIMATIONS.IDLE)\n\n    // }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Twin1);\n\n//# sourceURL=webpack:///./src/twin1.js?");

/***/ }),

/***/ "./src/twin2.js":
/*!**********************!*\
  !*** ./src/twin2.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n\n\n\nclass Twin2 extends _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(ctx, UNIT, ACCELERATION, FRICTION, IMPULSE, MAXDX, MAXDY, tileToPixel, pixelToTile, tcell, GRAVITY, TILESIZE, COLOR) {\n        super(ctx, UNIT, ACCELERATION, FRICTION, IMPULSE, MAXDX, MAXDY, tileToPixel, pixelToTile, tcell, GRAVITY, TILESIZE, COLOR)\n    }\n\n    renderTwin(ctx, twin, dt) {\n        ctx.fillStyle = this.COLOR.PURPLE;\n        ctx.fillRect(twin.x + (twin.dx * dt), twin.y + (twin.dy * dt), this.TILESIZE, this.TILESIZE);\n        let n, max;\n\n        ctx.fillStyle = this.COLOR.PURPLE;\n        for (n = 0, max = twin.collected; n < max; n++)\n            ctx.fillRect(this.tileToPixel(2 + n), this.tileToPixel(2), this.TILESIZE / 2, this.TILESIZE / 2);\n\n        ctx.fillStyle = this.COLOR.SLATE;\n        for (n = 0, max = twin.killed; n < max; n++)\n            ctx.fillRect(this.tileToPixel(2 + n), this.tileToPixel(3), this.TILESIZE / 2, this.TILESIZE / 2);\n\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Twin2);\n\n//# sourceURL=webpack:///./src/twin2.js?");

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const Util = {\r\n\r\n    timestamp() {\r\n        return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();\r\n    },\r\n\r\n    get(url, onsuccess) {\r\n        let request = new XMLHttpRequest();\r\n        request.onreadystatechange = function () {\r\n            if ((request.readyState == 4) && (request.status == 200))\r\n                onsuccess(request);\r\n        }\r\n        request.open(\"GET\", url, true);\r\n        request.send();\r\n    },\r\n\r\n    bound(x, min, max) {\r\n        return Math.max(min, Math.min(max, x));\r\n    }\r\n\r\n    , \r\n    animate(entity, animation) {\r\n        animation = animation || entity.animation;\r\n        entity.animationFrame = entity.animationFrame || 0;\r\n        entity.animationCounter = entity.animationCounter || 0;\r\n        if (entity.animation != animation) {\r\n            entity.animation = animation;\r\n            entity.animationFrame = 0;\r\n            entity.animationCounter = 0;\r\n        }\r\n        else if (++(entity.animationCounter) == Math.round(60 / animation.fps)) {\r\n            entity.animationFrame = this.normalize(entity.animationFrame + 1, 0, entity.animation.frames);\r\n            entity.animationCounter = 0;\r\n        }\r\n    },\r\n\r\n    normalize(n, min, max) {\r\n        while (n < min)\r\n            n += (max - min);\r\n        while (n >= max)\r\n            n -= (max - min);\r\n        return n;\r\n    },\r\n\r\n    overlap(x1, y1, w1, h1, x2, y2, w2, h2) {\r\n        return !(((x1 + w1 - 1) < x2) ||\r\n            ((x2 + w2 - 1) < x1) ||\r\n            ((y1 + h1 - 1) < y2) ||\r\n            ((y2 + h2 - 1) < y1))\r\n    }\r\n}\r\n\r\nmodule.exports = Util\n\n//# sourceURL=webpack:///./src/util.js?");

/***/ })

/******/ });